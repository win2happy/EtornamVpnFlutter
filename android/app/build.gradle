def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion 28

    lintOptions {
        disable 'InvalidPackage'
    }
    
    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "dev.etornam.etornam_vpn"
        minSdkVersion 16
        targetSdkVersion 28
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        lintOptions {
            checkReleaseBuilds false
        }
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
            // ndk {
            //     if (!project.hasProperty('target-platform')) {
            //         abiFilters 'arm64-v8a', 'armeabi-v7a', 'x86_64'
            //     } else {
            //         def platforms = project.property('target-platform').split(',')
            //         def platformMap = [
            //                 'android-arm'  : 'armeabi-v7a',
            //                 'android-arm64': 'arm64-v8a',
            //                 'android-x86'  : 'x86',
            //                 'android-x64'  : 'x86_64',
            //         ]
            //         abiFilters = platforms.stream().map({ e ->
            //             platformMap.containsKey(e) ? platformMap[e] : e
            //         }).toArray()
            //     }
            // }
        }
    }

    applicationVariants.all { variant ->
       variant.outputs.all {
           def version = variant.versionName // 版本号
           def buildType = variant.name // 包类型，debug 还是 release
           def createTime = new Date().format('yyyy_MM_dd_HH_mm_ss') // 打包时间 2021_09_25_16_45_52
           outputFileName = "eVPN_${buildType}_${version}_${createTime}.apk"
       }
    }
}

flutter {
    source '../..'
}
